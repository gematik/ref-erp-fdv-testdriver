package de.gematik.erezept.remotefdv.api.api;

import de.gematik.erezept.remotefdv.api.api.*;

import org.glassfish.jersey.media.multipart.FormDataBodyPart;

import de.gematik.erezept.remotefdv.api.model.AuditEvent;
import de.gematik.erezept.remotefdv.api.model.Communication;
import de.gematik.erezept.remotefdv.api.model.ErpTestdriverApiV1InfoGet400Response;
import de.gematik.erezept.remotefdv.api.model.ErpTestdriverApiV1LoginPut400Response;
import de.gematik.erezept.remotefdv.api.model.ErpTestdriverApiV1PharmacyAssignmentPostRequest;
import de.gematik.erezept.remotefdv.api.model.Info;
import de.gematik.erezept.remotefdv.api.model.LoginSuccess;
import de.gematik.erezept.remotefdv.api.model.MedicationDispense;
import de.gematik.erezept.remotefdv.api.model.Pharmacy;
import de.gematik.erezept.remotefdv.api.model.Prescription;
import de.gematik.erezept.remotefdv.api.model.ConsentCategory;
import de.gematik.erezept.remotefdv.api.model.EUAccessAuthorization;
import de.gematik.erezept.remotefdv.api.model.ErpTestdriverApiV1PrescriptionIdPatchRequest;

import java.util.List;
import de.gematik.erezept.remotefdv.api.api.NotFoundException;

import java.io.InputStream;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import javax.validation.constraints.*;
import javax.validation.Valid;

public abstract class ErpApiService {
public abstract Response erpTestdriverApiV1AuditEventsGet(SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1CommunicationGet(SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1CommunicationIdDelete(String id,SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1InfoGet(SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1LoginPut(String body,SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1MedicationdispenseGet(String whenhandedover,SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1Pharmacy2dCodePost(String body,SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1PharmacyAssignmentPost(Object body,SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1PharmacySearchGet(String near,String addressCity,String name,SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1PrescriptionGet(SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1PrescriptionIdDelete(String id,SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1PrescriptionIdGet(String id,SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1StartPut(SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1StopPut(SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1ConsentPost(ConsentCategory category, SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1ConsentDelete(ConsentCategory category, SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1ConsentGet(ConsentCategory category, SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1EuAccessAuthorizationPost(String country, String accessCode, SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1EuAccessAuthorizationDelete(SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1EuAccessAuthorizationGet(SecurityContext securityContext) throws NotFoundException;
public abstract Response erpTestdriverApiV1PrescriptionIdPatch(String id, ErpTestdriverApiV1PrescriptionIdPatchRequest patchRequest, SecurityContext securityContext) throws NotFoundException;

}
